#!/usr/bin/env python3

import sys
import xmltodict
import json
import requests
import re

NAME = 'israel-uv'

def ims():
    url = 'https://ims.data.gov.il/sites/default/files/isr_rad.xml'
    try:
        xml = requests.get(url, timeout=2)
    except:
        print('Timed out, try again.')
        sys.exit()
    json_s = json.dumps(xmltodict.parse(xml.content), indent=4) #string
    json_d = json.loads(json_s) #dictionary
    return json_d

def credit():
    print('\nData provided by:')
    print('Israel Meteorological Service')
    print('(https://ims.gov.il/en/UVIHourly)')

def uvdata(CITY):
    for location in ims()['SolarRadiationForecast']['Location']:
        city = location['LocationMetaData']['LocationNameEng']
        times = []
        indices = []
        levels = []
        
        for td in location['LocationData']['TimeUnitData']:
            times.append(td['SolRadPeriod']['DateTimeTo'])
            indices.append(td['Element']['ElementIndex'])
            levels.append(td['Element']['ElementValue'])
        
        count = 0
        if city == CITY:
            print(f'Solar radiation forecast for {city}, Israel:\n')
            print('TIME\t\t\tUV INDEX')
            print('-'*16, '\t', '-'*14, sep='')
            
            for time, index, level in zip(times, indices, levels):
                level = {                   
                    'L': 'Low',                     
                    'M': 'Medium',                  
                    'H': 'High',
                    'V': 'Very High',
                    'E': 'Extreme'} [level]
                print(f'{time}\t{index} ({level})')
                count += 1
                if count == 12: #hours to list
                    break
    
    credit() #credit to IMS

def get_cities():
    cities = []
    for location in ims()['SolarRadiationForecast']['Location']:
       city = location['LocationMetaData']['LocationNameEng']
       cities.append(city)    
    return cities

def list_cities():
    print('Select city from list and run using \'--city\' option.\n')
    print('CITIES')
    print('-'*15)
    for city in get_cities(): print(city)
    credit() #credit to IMS

def upper(match):
    return match.group(1).upper()

def pascalcase(name):
    pattern = r'(\b[a-z])'
    repl = r'\1'.upper()
    result = re.sub(pattern, upper, name)
    return result
    
def start():
    if len(sys.argv) == 1:
        display_help()

    elif len(sys.argv) >= 2:
        first = sys.argv[1]
        
        #help
        if first in('-h','--help'):
            display_help()

        #list cities
        elif first in('-l','--list'):
            list_cities()

        #city forecast
        elif first in('-c', '--city'):
            if len(sys.argv) >= 3:
                second = pascalcase(sys.argv[2])
                if second in get_cities(): uvdata(second)
                else: print(f'{NAME}: Invalid city.')
            else:
                print(f'{NAME}: City not provided as argument vector.')
                print('Try \'--list\' to list cities or \'--help\' for',
                    'more information.')

        #if city provided as argv[1]
        elif first in get_cities():
            uvdata(first)

        else:
            display_help()
        
def display_help():
    T = '\t'
    print(f'Usage: ./{NAME} [OPTION]\n')
    print('Example:')
    print(f'./{NAME} -c Haifa{T}# Display solar radiation forecast for the', 
        'city of Haifa.\n')
    print('Options:')
    print(f'-l, --list', 'List avaiable cities.', sep=T*2)
    print(f'-c, --city', 'Displays solar radiation forecast for selected city.'
        , sep=T*2)
    print(f'-h, --help', 'Display this help menu and quit.', sep=T*2)

try:
    start()
except KeyboardInterrupt:
    print('Quitting')
